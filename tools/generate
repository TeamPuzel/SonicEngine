#!/usr/bin/env python3
import sys
import os
from datetime import datetime
from typing import Optional

HEADER_TEMPLATE = """// Created by Lua (TeamPuzel) on {date}.
// Copyright (c) {year} All rights reserved.
#pragma once
#include <sonic>

namespace sonic {{
    class {classname} final : public Object, public Codable<{classname}> {{}};
}}
"""

CPP_TEMPLATE = """#include "{classname}.hpp"

using namespace sonic;

EXPORT_SONIC_OBJECT({classname})
"""

def ordinal_suffix(day: int) -> str:
    """Return the ordinal suffix for a given day (1 -> 'st', 2 -> 'nd', etc.)."""
    if 11 <= day % 100 <= 13:
        return "th"
    return {1: "st", 2: "nd", 3: "rd"}.get(day % 10, "th")

def generate_object(path: str) -> None:
    """Generate a pair of .hpp and .cpp files for a Sonic object."""
    full_path: str = os.path.join("object", path)
    dir_path: str = os.path.dirname(full_path)
    classname: str = os.path.basename(full_path)

    # Ensure directory exists
    if dir_path and not os.path.exists(dir_path):
        os.makedirs(dir_path)

    today: datetime = datetime.now()
    day: int = today.day
    date_str: str = today.strftime(f"%B {day}{ordinal_suffix(day)} %Y")
    year_str: str = today.strftime("%Y")

    header_content: str = HEADER_TEMPLATE.format(
        date=date_str,
        year=year_str,
        classname=classname
    )

    cpp_content: str = CPP_TEMPLATE.format(classname=classname)

    # Write .hpp file
    with open(os.path.join(dir_path, classname + ".hpp"), "w", encoding="utf-8") as f:
        f.write(header_content)

    # Write .cpp file
    with open(os.path.join(dir_path, classname + ".cpp"), "w", encoding="utf-8") as f:
        f.write(cpp_content)

    print(f"Generated {classname}.hpp and {classname}.cpp in {dir_path or '.'}")

def main(argv: Optional[list[str]] = None) -> None:
    """Main entry point for CLI usage."""
    if argv is None:
        argv = sys.argv

    if len(argv) != 3 or argv[1] != "object":
        print("Usage: python generate.py object path/to/ClassName")
        sys.exit(1)

    generate_object(argv[2])

if __name__ == "__main__":
    main()
